// This file provides tests for the client package.
//
// Code generated by github.com/MarkRosemaker DO NOT EDIT.

package toggl_test

import (
	"bytes"
	"context"
	"errors"
	"io"
	"maps"
	"net/http"
	"net/url"
	"path"
	"slices"
	"strings"
	"testing"
	"time"

	"github.com/go-api-libs/api"
	"github.com/go-api-libs/toggl/pkg/toggl"
	"gopkg.in/dnaeon/go-vcr.v3/cassette"
	"gopkg.in/dnaeon/go-vcr.v3/recorder"
)

type testRoundTripper struct {
	rsp *http.Response
	err error
}

func (t *testRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
	return t.rsp, t.err
}

func TestClient_Error(t *testing.T) {
	ctx := context.Background()

	if _, err := toggl.NewClient("", ""); err == nil {
		t.Fatal("expected error")
	} else if "username is empty" != err.Error() {
		t.Fatalf("want: username is empty, got: %v", err)
	}

	if _, err := toggl.NewClient("myUsername", ""); err == nil {
		t.Fatal("expected error")
	} else if "password is empty" != err.Error() {
		t.Fatalf("want: password is empty, got: %v", err)
	}

	c, err := toggl.NewClient("myUsername", "myPassword")
	if err != nil {
		t.Fatal(err)
	}

	t.Run("Do", func(t *testing.T) {
		testErr := errors.New("test error")
		http.DefaultClient.Transport = &testRoundTripper{err: testErr}

		if _, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true}); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.ListOrganizations(ctx); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
			Before:         mustParseTime("2024-12-16T03:25:20+01:00"),
			EndDate:        mustParseTime("2024-12-16T03:25:20+01:00"),
			IncludeSharing: true,
			Meta:           true,
			Since:          1734304527,
			StartDate:      mustParseTime("2024-12-16T03:25:20+01:00"),
		}); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.GetCurrentTimeEntry(ctx); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.CreateOrganization(ctx, toggl.NewOrganization{
			Name:          "Your Organization",
			WorkspaceName: "Your Workspace",
		}); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if err := c.PostOrganizations9011051Workspaces(ctx, toggl.PostOrganizations9011051WorkspacesJSONRequestBody{
			Admins:                      []int{},
			DefaultCurrency:             "string",
			Name:                        "string",
			OnlyAdminsMayCreateProjects: true,
			OnlyAdminsSeeBillableRates:  true,
			OnlyAdminsSeeTeamDashboard:  true,
			ProjectsBillableByDefault:   true,
		}); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.GetOrganization(ctx, 9011051); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
			CreatedWith: "github.com/go-api-libs/toggl",
			Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
			WorkspaceID: 2230580,
		}); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}

		if _, err := c.StopTimeEntry(ctx, 2230580, 3730303299); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, testErr) {
			t.Fatalf("want: %v, got: %v", testErr, err)
		}
	})

	t.Run("Unmarshal", func(t *testing.T) {
		errDecode := &api.DecodingError{}

		t.Run("GetMe", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("ListOrganizations", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.ListOrganizations(ctx); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.ListOrganizations(ctx); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.ListOrganizations(ctx); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("ListTimeEntries", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				Before:         mustParseTime("2024-12-16T03:25:20+01:00"),
				EndDate:        mustParseTime("2024-12-16T03:25:20+01:00"),
				IncludeSharing: true,
				Meta:           true,
				Since:          1734304527,
				StartDate:      mustParseTime("2024-12-16T03:25:20+01:00"),
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				Before:         mustParseTime("2024-12-16T03:25:20+01:00"),
				EndDate:        mustParseTime("2024-12-16T03:25:20+01:00"),
				IncludeSharing: true,
				Meta:           true,
				Since:          1734304527,
				StartDate:      mustParseTime("2024-12-16T03:25:20+01:00"),
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				Before:         mustParseTime("2024-12-16T03:25:20+01:00"),
				EndDate:        mustParseTime("2024-12-16T03:25:20+01:00"),
				IncludeSharing: true,
				Meta:           true,
				Since:          1734304527,
				StartDate:      mustParseTime("2024-12-16T03:25:20+01:00"),
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}

			// unknown content type for 400 Bad Request
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusBadRequest,
			}}

			if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				Before:         mustParseTime("2024-12-16T03:25:20+01:00"),
				EndDate:        mustParseTime("2024-12-16T03:25:20+01:00"),
				IncludeSharing: true,
				Meta:           true,
				Since:          1734304527,
				StartDate:      mustParseTime("2024-12-16T03:25:20+01:00"),
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusBadRequest,
			}}

			if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				Before:         mustParseTime("2024-12-16T03:25:20+01:00"),
				EndDate:        mustParseTime("2024-12-16T03:25:20+01:00"),
				IncludeSharing: true,
				Meta:           true,
				Since:          1734304527,
				StartDate:      mustParseTime("2024-12-16T03:25:20+01:00"),
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("GetCurrentTimeEntry", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.GetCurrentTimeEntry(ctx); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.GetCurrentTimeEntry(ctx); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.GetCurrentTimeEntry(ctx); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("CreateOrganization", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.CreateOrganization(ctx, toggl.NewOrganization{
				Name:          "Your Organization",
				WorkspaceName: "Your Workspace",
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.CreateOrganization(ctx, toggl.NewOrganization{
				Name:          "Your Organization",
				WorkspaceName: "Your Workspace",
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.CreateOrganization(ctx, toggl.NewOrganization{
				Name:          "Your Organization",
				WorkspaceName: "Your Workspace",
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("PostOrganizations9011051Workspaces", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if err := c.PostOrganizations9011051Workspaces(ctx, toggl.PostOrganizations9011051WorkspacesJSONRequestBody{
				Admins:                      []int{},
				DefaultCurrency:             "string",
				Name:                        "string",
				OnlyAdminsMayCreateProjects: true,
				OnlyAdminsSeeBillableRates:  true,
				OnlyAdminsSeeTeamDashboard:  true,
				ProjectsBillableByDefault:   true,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 403 Forbidden
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusForbidden,
			}}

			if err := c.PostOrganizations9011051Workspaces(ctx, toggl.PostOrganizations9011051WorkspacesJSONRequestBody{
				Admins:                      []int{},
				DefaultCurrency:             "string",
				Name:                        "string",
				OnlyAdminsMayCreateProjects: true,
				OnlyAdminsSeeBillableRates:  true,
				OnlyAdminsSeeTeamDashboard:  true,
				ProjectsBillableByDefault:   true,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusForbidden,
			}}

			if err := c.PostOrganizations9011051Workspaces(ctx, toggl.PostOrganizations9011051WorkspacesJSONRequestBody{
				Admins:                      []int{},
				DefaultCurrency:             "string",
				Name:                        "string",
				OnlyAdminsMayCreateProjects: true,
				OnlyAdminsSeeBillableRates:  true,
				OnlyAdminsSeeTeamDashboard:  true,
				ProjectsBillableByDefault:   true,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("GetOrganization", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.GetOrganization(ctx, 9011051); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.GetOrganization(ctx, 9011051); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.GetOrganization(ctx, 9011051); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("CreateTimeEntry", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
				WorkspaceID: 2230580,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
				WorkspaceID: 2230580,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
				WorkspaceID: 2230580,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}

			// unknown content type for 400 Bad Request
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusBadRequest,
			}}

			if _, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
				WorkspaceID: 2230580,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusBadRequest,
			}}

			if _, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
				WorkspaceID: 2230580,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})

		t.Run("StopTimeEntry", func(t *testing.T) {
			// unknown status code
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{StatusCode: http.StatusTeapot}}

			if _, err := c.StopTimeEntry(ctx, 2230580, 3730303299); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownStatusCode) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownStatusCode, err)
			}

			// unknown content type for 200 OK
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Header:     http.Header{"Content-Type": []string{"foo"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.StopTimeEntry(ctx, 2230580, 3730303299); err == nil {
				t.Fatal("expected error")
			} else if !errors.Is(err, api.ErrUnknownContentType) {
				t.Fatalf("want: %v, got: %v", api.ErrUnknownContentType, err)
			}

			// decoding error for known content type "application/json"
			http.DefaultClient.Transport = &testRoundTripper{rsp: &http.Response{
				Body:       io.NopCloser(strings.NewReader("{")),
				Header:     http.Header{"Content-Type": []string{"application/json"}},
				StatusCode: http.StatusOK,
			}}

			if _, err := c.StopTimeEntry(ctx, 2230580, 3730303299); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &errDecode) {
				t.Fatalf("want: %v, got: %v", errDecode, err)
			}
		})
	})
}

func mustParseTime(value string) time.Time {
	t, err := time.Parse(time.RFC3339Nano, value)
	if err != nil {
		panic(err)
	}

	return t
}

func replay(t *testing.T, cassette string) {
	t.Helper()

	r, err := recorder.NewWithOptions(&recorder.Options{
		CassetteName:       cassette,
		Mode:               recorder.ModeReplayOnly,
		RealTransport:      http.DefaultTransport,
		SkipRequestLatency: true,
	})
	if err != nil {
		t.Fatal(err)
	}
	t.Cleanup(func() {
		_ = r.Stop()
	})

	r.SetMatcher(matcher)
	http.DefaultClient.Transport = r
}

func matcher(r *http.Request, i cassette.Request) bool {
	u, err := url.Parse(i.URL)
	if err != nil {
		panic(err)
	}

	return r.Method == i.Method &&
		r.URL.Scheme == u.Scheme &&
		r.URL.Opaque == u.Opaque &&
		r.URL.Host == u.Host &&
		path.Clean("/"+r.URL.Path) == path.Clean("/"+u.Path) &&
		r.URL.Fragment == u.Fragment &&
		maps.EqualFunc(r.URL.Query(), u.Query(), slices.Equal) &&
		getBody(r) == i.Body
}

func getBody(r *http.Request) string {
	if r.Body == nil {
		return ""
	}

	if r.GetBody == nil {
		b, err := io.ReadAll(r.Body)
		if err != nil {
			panic(err)
		}

		r.Body.Close()
		r.Body = io.NopCloser(bytes.NewReader(b))
		return string(b)
	}

	body, err := r.GetBody()
	if err != nil {
		panic(err)
	}
	defer body.Close()

	b, err := io.ReadAll(body)
	if err != nil {
		panic(err)
	}

	return string(b)
}

func TestClient_VCR(t *testing.T) {
	ctx := context.Background()

	c, err := toggl.NewClient("myUsername", "myPassword")
	if err != nil {
		t.Fatal(err)
	}

	t.Run("2024-12-09", func(t *testing.T) {
		replay(t, "vcr/2024-12-09")

		if _, err := c.GetMe(ctx, nil); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, api.ErrStatusCode) {
			t.Fatalf("want: %v, got: %v", api.ErrStatusCode, err)
		}
	})

	t.Run("2024-12-10", func(t *testing.T) {
		replay(t, "vcr/2024-12-10")

		if _, err := c.GetMe(ctx, nil); err == nil {
			t.Fatal("expected error")
		} else if !errors.Is(err, api.ErrStatusCode) {
			t.Fatalf("want: %v, got: %v", api.ErrStatusCode, err)
		}
	})

	t.Run("2024-12-11", func(t *testing.T) {
		replay(t, "vcr/2024-12-11")

		res, err := c.GetMe(ctx, nil)
		if err != nil {
			t.Fatal(err)
		} else if res == nil {
			t.Fatal("result is nil")
		}
	})

	t.Run("2024-12-12", func(t *testing.T) {
		replay(t, "vcr/2024-12-12")

		{
			res, err := c.GetMe(ctx, nil)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}
	})

	t.Run("2024-12-13", func(t *testing.T) {
		replay(t, "vcr/2024-12-13")

		{
			res, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.GetCurrentTimeEntry(ctx)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}
	})

	t.Run("2024-12-14", func(t *testing.T) {
		replay(t, "vcr/2024-12-14")

		{
			res, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.GetCurrentTimeEntry(ctx)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}
	})

	t.Run("2024-12-15", func(t *testing.T) {
		replay(t, "vcr/2024-12-15")

		{
			res, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.GetCurrentTimeEntry(ctx)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:17:59.593648+01:00"),
				WorkspaceID: 2230580,
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Start:       mustParseTime("2024-12-15T21:19:39.215084+01:00"),
				WorkspaceID: 2230580,
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}
	})

	t.Run("2024-12-16", func(t *testing.T) {
		replay(t, "vcr/2024-12-16")

		{
			res, err := c.GetMe(ctx, &toggl.GetMeParams{WithRelatedData: true})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.GetCurrentTimeEntry(ctx)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Duration:    time.Hour,
				Start:       mustParseTime("2024-12-16T03:18:20.257412+01:00"),
				WorkspaceID: 2230580,
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Description: "Hello Toggl",
				Start:       mustParseTime("2024-12-16T02:29:40.335227+01:00"),
				WorkspaceID: 2230580,
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Description: "Hello Toggl",
				Duration:    -time.Second,
				Start:       mustParseTime("2024-12-16T02:31:14.086355+01:00"),
				WorkspaceID: 2230580,
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateTimeEntry(ctx, 2230580, toggl.NewTimeEntry{
				CreatedWith: "github.com/go-api-libs/toggl",
				Description: "Hello Toggl",
				Duration:    -time.Second,
				Start:       mustParseTime("2024-12-16T02:55:24.837112+01:00"),
				WorkspaceID: 2230580,
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.StopTimeEntry(ctx, 2230580, 3730303299)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{Since: 1734304527})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			apiErr := &api.Error{}
			if _, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				Before: mustParseTime("2024-12-16T03:25:20+01:00"),
				Since:  1734305120,
			}); err == nil {
				t.Fatal("expected error")
			} else if !errors.As(err, &apiErr) {
				t.Fatalf("want: %T, got: %T", apiErr, err)
			} else if !apiErr.IsCustom {
				t.Fatalf("want custom, got: %t", apiErr.IsCustom)
			}
		}

		{
			res, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				EndDate:        mustParseTime("2024-12-16T18:52:53+01:00"),
				IncludeSharing: true,
				Meta:           true,
				StartDate:      mustParseTime("2024-12-16T15:52:53+01:00"),
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				EndDate:   mustParseTime("2024-12-16T18:55:20+01:00"),
				Meta:      true,
				StartDate: mustParseTime("2024-12-16T15:55:20+01:00"),
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.ListTimeEntries(ctx, &toggl.ListTimeEntriesParams{
				EndDate:        mustParseTime("2024-12-16T18:58:15+01:00"),
				IncludeSharing: true,
				StartDate:      mustParseTime("2024-12-16T15:58:15+01:00"),
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.CreateOrganization(ctx, toggl.NewOrganization{
				Name:          "Your Organization",
				WorkspaceName: "Your Workspace",
			})
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.ListOrganizations(ctx)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}
	})

	t.Run("2024-12-17", func(t *testing.T) {
		replay(t, "vcr/2024-12-17")

		{
			res, err := c.ListOrganizations(ctx)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}

		{
			res, err := c.GetOrganization(ctx, 9011051)
			if err != nil {
				t.Fatal(err)
			} else if res == nil {
				t.Fatal("result is nil")
			}
		}
	})
}
